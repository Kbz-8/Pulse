name: OpenGL

on:
  pull_request:
  push:
    paths-ignore:
      - '.github/workflows/*.yml'
      - '!.github/workflows/opengl-test-windows.yml'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        arch: [x64]
        mode: [debug]

    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    env:
      # Force software OpenGL (compute-capable) via Mesa llvmpipe
      GALLIUM_DRIVER: llvmpipe
      MESA_GL_VERSION_OVERRIDE: "4.5"

    steps:
    - name: Get current date as package key
      id: cache_key
      run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT

    - name: Checkout repository
      uses: actions/checkout@v4

    # Force xmake to a specific folder (for cache)
    - name: Set xmake env
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # Install xmake
    - name: Setup xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: branch@dev
        actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

    # Update xmake repository (in order to have the file that will be cached)
    - name: Update xmake repository
      run: xmake repo --update

    # Headless OpenGL prerequisites (Windows)
    - name: Install 7zip (for Mesa archive)
      run: choco install -y 7zip

    - name: Download Mesa (prebuilt, MSVC x64)
      shell: pwsh
      run: |
        $ver = "24.3.4"
        $uri = "https://github.com/pal1000/mesa-dist-win/releases/download/$ver/mesa3d-$ver-release-msvc.7z"
        Invoke-WebRequest $uri -OutFile "$env:RUNNER_TEMP\mesa.7z"
        7z x "$env:RUNNER_TEMP\mesa.7z" "-o$env:RUNNER_TEMP\mesa" -y
        # expose for later steps
        echo "MESA_DLL_DIR=$env:RUNNER_TEMP\mesa\x64" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Fetch xmake dephash
    - name: Retrieve dependencies hash
      id: dep_hash
      run: echo "hash=$(xmake l utils.ci.packageskey)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    # Cache xmake dependencies
    - name: Restore cached xmake dependencies
      id: restore-depcache
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: Linux-${{ matrix.arch }}-${{ matrix.confs.mode }}${{ matrix.confs.cache_key }}-${{ steps.dep_hash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

    # Setup compilation mode and install project dependencies
    - name: Configure xmake and install dependencies
      run: xmake config --arch=${{ matrix.arch }} --mode=${{ matrix.confs.mode }} ${{ matrix.confs.config }} --ccache=n --yes

    # Save dependencies
    - name: Save cached xmake dependencies
      if: ${{ !steps.restore-depcache.outputs.cache-hit }}
      uses: actions/cache/save@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

    # Cache assets downloading
    - name: Restore cached assets
      id: restore-assets
      uses: actions/cache/restore@v4
      with:
        path: assets
        key: assets-${{ hashFiles('assets/examples_version.txt', 'assets/unittests_version.txt') }}

    - name: Test
      shell: pwsh
      run: |
        xmake config --opengl-tests=y --arch=${{ matrix.arch }} --mode=${{ matrix.mode }} ${{ matrix.confs.config }} --ccache=n --yes
        xmake build --yes OpenGLUnitTests -vD

        $bindir = Join-Path $PWD 'build\Bin\windows_x86_64'
        $exe = Join-Path $bindir 'OpenGLUnitTests.exe'
        if (!(Test-Path $exe)) { throw "OpenGLUnitTests.exe not found at $exe" }

        # Copy Mesa DLLs next to the exe (forces software OpenGL on Windows)
        Copy-Item "$env:MESA_DLL_DIR\opengl32.dll"       -Destination $bindir -Force
        Copy-Item "$env:MESA_DLL_DIR\libgallium_wgl.dll" -Destination $bindir -Force
        Copy-Item "$env:MESA_DLL_DIR\libEGL.dll"         -Destination $bindir -Force
        # If needed for older setups: Copy-Item "$env:MESA_DLL_DIR\osmesa.dll" $bindir -Force

        # Run tests
        & $exe

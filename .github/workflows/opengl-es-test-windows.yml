name: OpenGL-ES

on:
  pull_request:
  push:
    paths-ignore:
      - '.github/workflows/*.yml'
      - '!.github/workflows/opengl-es-test-windows.yml'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        arch: [x64]
        mode: [debug]

    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}

    steps:
    - name: Get current date as package key
      id: cache_key
      run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Mesa
      run: |
        curl -LO https://github.com/pal1000/mesa-dist-win/releases/download/23.3.1/mesa3d-23.3.1-release-msvc.7z
        7z x mesa3d-23.3.1-release-msvc.7z -omesa

    - name: Set Mesa in PATH
      run: echo "$env:GITHUB_WORKSPACE\\mesa\\x64" | Out-File -Append -FilePath $env:GITHUB_PATH    

    - name: Set Mesa env
      run: |
        echo "LIBGL_ALWAYS_SOFTWARE=1" >> $env:GITHUB_ENV
        echo "MESA_GL_VERSION_OVERRIDE=4.3" >> $env:GITHUB_ENV
        echo "MESA_GLES_VERSION_OVERRIDE=3.2" >> $env:GITHUB_ENV

    # Force xmake to a specific folder (for cache)
    - name: Set xmake env
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # Install xmake
    - name: Setup xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: branch@dev
        actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

    # Update xmake repository (in order to have the file that will be cached)
    - name: Update xmake repository
      run: xmake repo --update

    # Fetch xmake dephash
    - name: Retrieve dependencies hash
      id: dep_hash
      run: echo "hash=$(xmake l utils.ci.packageskey)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    # Cache xmake dependencies
    - name: Restore cached xmake dependencies
      id: restore-depcache
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: Linux-${{ matrix.arch }}-${{ matrix.confs.mode }}${{ matrix.confs.cache_key }}-${{ steps.dep_hash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

    # Setup compilation mode and install project dependencies
    - name: Configure xmake and install dependencies
      run: xmake config --arch=${{ matrix.arch }} --mode=${{ matrix.confs.mode }} ${{ matrix.confs.config }} --ccache=n --yes

    # Save dependencies
    - name: Save cached xmake dependencies
      if: ${{ !steps.restore-depcache.outputs.cache-hit }}
      uses: actions/cache/save@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

    # Cache assets downloading
    - name: Restore cached assets
      id: restore-assets
      uses: actions/cache/restore@v4
      with:
        path: assets
        key: assets-${{ hashFiles('assets/examples_version.txt', 'assets/unittests_version.txt') }}

    - name: Test
      run: |
        xmake config --opengl-es-tests=y --arch=${{ matrix.arch }} --mode=${{ matrix.confs.mode }} ${{ matrix.confs.config }} --ccache=n --yes
        xmake build --yes OpenGLESUnitTests
        xmake run --yes OpenGLESUnitTests
